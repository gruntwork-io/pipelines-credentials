name: Pipelines Credentials
description: Fetch Pipelines Credentials
inputs:
  PIPELINES_TOKEN_PATH:
    required: true
  FALLBACK_TOKEN:
    required: true
outputs:
  PIPELINES_TOKEN:
    value: ${{ steps.get_token.outputs.PIPELINES_TOKEN }}

runs:
  using: composite
  steps:
    - name: Fetch Pipelines Token
      id: get_token
      uses: actions/github-script@v7
      env:
        FALLBACK_TOKEN: ${{ inputs.FALLBACK_TOKEN }}
        PIPELINES_TOKEN_PATH: ${{ inputs.PIPELINES_TOKEN_PATH }}
      with:
        script: |
          const aud = "http://127.0.0.1:3000"
          const apiBaseURL = "https://aperture-dev-git-pipelines-api-gruntwork.vercel.app/api/v1"
          const idToken = await core.getIDToken(aud)
          const providerTokenResponse = await fetch(`${apiBaseURL}/tokens/auth/login`, {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${idToken}`
            }
          })
          if providerTokenResponse.ok {
            const providerToken = providerTokenResponse.json().token
            const pipelinesTokenResponse = await fetch(`${apiBaseURL}//tokens/pat/${process.env.PIPELINES_TOKEN_PATH}`, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${providerToken}`
              }
            })
            if pipelinesTokenResponse.ok {

              const pipelinesToken = pipelinesTokenResponse.json().token
              console.log("Setting PIPELINES_TOKEN to GitHubApp token")
              core.setOutput('PIPELINES_TOKEN', pipelinesToken)
              return
            } else {
              console.log("Failed to get pipelines token: ${pipelinesTokenResponse.statusText}")
            }
          } else {
            console.log("Failed to get provider token: ${providerTokenResponse.statusText}")
          }
          console.log("Setting PIPELINES_TOKEN to fallback token")
          core.setOutput('PIPELINES_TOKEN', process.env.FALLBACK_TOKEN)
