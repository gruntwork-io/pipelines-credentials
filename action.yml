name: Pipelines Credentials
description: Fetch Pipelines Credentials
inputs:
  PIPELINES_TOKEN_PATH:
    required: true
  FALLBACK_TOKEN:
    required: true
  api_base_url:
    default: "https://api.app.gruntwork.io/api/v1"
outputs:
  PIPELINES_TOKEN:
    value: ${{ steps.get_token.outputs.PIPELINES_TOKEN }}

runs:
  using: composite
  steps:
    - name: Fetch Pipelines Token
      id: get_token
      uses: actions/github-script@v7
      env:
        FALLBACK_TOKEN: ${{ inputs.FALLBACK_TOKEN }}
        PIPELINES_TOKEN_PATH: ${{ inputs.PIPELINES_TOKEN_PATH }}
        API_BASE_URL: ${{ inputs.api_base_url }}
      with:
        script: |
          try {
            const aud = "https://api.app.gruntwork.io"
            const apiBaseURL = process.env.API_BASE_URL

            const idToken = await core.getIDToken(aud)

            const providerTokenResponse = await fetch(`${apiBaseURL}/tokens/auth/login`, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${idToken}`
              }
            })

            if (providerTokenResponse.ok) {
              const providerTokenJson = await providerTokenResponse.json()
              const pipelinesTokenResponse = await fetch(`${apiBaseURL}/tokens/pat/${process.env.PIPELINES_TOKEN_PATH}`, {
                method: "GET",
                headers: {
                  "Authorization": `Bearer ${providerTokenJson.token}`
                }
              })

              if (pipelinesTokenResponse.ok) {
                const pipelinesTokenJson = await pipelinesTokenResponse.json()
                console.log("Setting PIPELINES_TOKEN to GitHubApp token")
                core.setOutput('PIPELINES_TOKEN', pipelinesTokenJson.token)

                return
              } else {
                console.log(`Failed to get pipelines token: ${pipelinesTokenResponse.status} ${pipelinesTokenResponse.statusText}`)
              }

            } else {
              console.log(`Failed to get provider token: ${pipelinesTokenResponse.status} ${providerTokenResponse.statusText}`)
            }

          } catch (error) {
            console.log(`Failed to get pipelines token: ${error}`)
          }

          console.log("Setting PIPELINES_TOKEN to fallback token")
          core.setOutput('PIPELINES_TOKEN', process.env.FALLBACK_TOKEN)
